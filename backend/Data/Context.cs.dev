using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using backend.Models;

namespace backend.Data;

public partial class Context : DbContext
{
    public Context()
    {
    }

    public Context(DbContextOptions<Context> options)
        : base(options)
    {
    }

    public virtual DbSet<CurrentWorkspace> CurrentWorkspaces { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Floor> Floors { get; set; }

    public virtual DbSet<HistoryWorkspaceStatus> HistoryWorkspaceStatuses { get; set; }

    public virtual DbSet<Office> Offices { get; set; }

    public virtual DbSet<OfficesStatus> OfficesStatuses { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<RentalAgreement> RentalAgreements { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<ReportsType> ReportsTypes { get; set; }

    public virtual DbSet<Room> Rooms { get; set; }

    public virtual DbSet<RoomStatus> RoomStatuses { get; set; }

    public virtual DbSet<StatusesWorker> StatusesWorkers { get; set; }

    public virtual DbSet<StatusesWorkspace> StatusesWorkspaces { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Worker> Workers { get; set; }

    public virtual DbSet<WorkerDetail> WorkerDetails { get; set; }

    public virtual DbSet<WorkersStatusesType> WorkersStatusesTypes { get; set; }

    public virtual DbSet<Workspace> Workspaces { get; set; }

    public virtual DbSet<WorkspaceReservationsStatus> WorkspaceReservationsStatuses { get; set; }

    public virtual DbSet<WorkspaceStatusesType> WorkspaceStatusesTypes { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseNpgsql("Host=db;Port=5432;Database=offices_management;Username=postgres;Password=root");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CurrentWorkspace>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("current_workspaces", "offices_management");

            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.FullWorkerName).HasColumnName("full_worker_name");
            entity.Property(e => e.IdRoom).HasColumnName("id_room");
            entity.Property(e => e.IdStatusWorkspace).HasColumnName("id_status_workspace");
            entity.Property(e => e.IdWorker).HasColumnName("id_worker");
            entity.Property(e => e.IdWorkspace).HasColumnName("id_workspace");
            entity.Property(e => e.IdWorkspaceReservationsStatuses).HasColumnName("id_workspace_reservations_statuses");
            entity.Property(e => e.IdWorkspaceStatusType).HasColumnName("id_workspace_status_type");
            entity.Property(e => e.ReservationStatuseName)
                .HasMaxLength(45)
                .HasColumnName("reservation_statuse_name");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.WorkspaceName)
                .HasMaxLength(45)
                .HasColumnName("workspace_name");
            entity.Property(e => e.WorkspaceStatusTypeName)
                .HasMaxLength(45)
                .HasColumnName("workspace_status_type_name");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.IdDepartment).HasName("departments_pkey");

            entity.ToTable("departments", "offices_management");

            entity.Property(e => e.IdDepartment).HasColumnName("id_department");
            entity.Property(e => e.Descriptions)
                .HasMaxLength(500)
                .HasColumnName("descriptions");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Floor>(entity =>
        {
            entity.HasKey(e => e.IdFloor).HasName("floors_pkey");

            entity.ToTable("floors", "offices_management");

            entity.Property(e => e.IdFloor).HasColumnName("id_floor");
            entity.Property(e => e.IdOffice).HasColumnName("id_office");
            entity.Property(e => e.NumberFloor).HasColumnName("number_floor");
            entity.Property(e => e.Scheme)
                .HasMaxLength(100)
                .HasColumnName("scheme");
            entity.Property(e => e.Square).HasColumnName("square");
            entity.Property(e => e.TotalWorkspace).HasColumnName("total_workspace");

            entity.HasOne(d => d.IdOfficeNavigation).WithMany(p => p.Floors)
                .HasForeignKey(d => d.IdOffice)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("floors_id_office_fkey");
        });

        modelBuilder.Entity<HistoryWorkspaceStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("history_workspace_statuses", "offices_management");

            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.IdStatusWorkspace).HasColumnName("id_status_workspace");
            entity.Property(e => e.IdWorkspace).HasColumnName("id_workspace");
            entity.Property(e => e.IdWorkspaceReservationsStatuses).HasColumnName("id_workspace_reservations_statuses");
            entity.Property(e => e.IdWorkspaceStatusType).HasColumnName("id_workspace_status_type");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.UserName)
                .HasMaxLength(50)
                .HasColumnName("user_name");
            entity.Property(e => e.WorkerFullName).HasColumnName("worker_full_name");
            entity.Property(e => e.WorkspaceReservationStatuseName)
                .HasMaxLength(45)
                .HasColumnName("workspace_reservation_statuse_name");
            entity.Property(e => e.WorkspaceStatusTypeName)
                .HasMaxLength(45)
                .HasColumnName("workspace_status_type_name");
        });

        modelBuilder.Entity<Office>(entity =>
        {
            entity.HasKey(e => e.IdOffice).HasName("offices_pkey");

            entity.ToTable("offices", "offices_management");

            entity.Property(e => e.IdOffice).HasColumnName("id_office");
            entity.Property(e => e.Address)
                .HasMaxLength(200)
                .HasColumnName("address");
            entity.Property(e => e.City)
                .HasMaxLength(30)
                .HasColumnName("city");
            entity.Property(e => e.IdOfficeStatus).HasColumnName("id_office_status");
            entity.Property(e => e.Image)
                .HasMaxLength(100)
                .HasColumnName("image");
            entity.Property(e => e.OfficeName)
                .HasMaxLength(100)
                .HasColumnName("office_name");
            entity.Property(e => e.Square).HasColumnName("square");
            entity.Property(e => e.TotalWorkspace).HasColumnName("total_workspace");

            entity.HasOne(d => d.IdOfficeStatusNavigation).WithMany(p => p.Offices)
                .HasForeignKey(d => d.IdOfficeStatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("offices_offices_status_fk");
        });

        modelBuilder.Entity<OfficesStatus>(entity =>
        {
            entity.HasKey(e => e.IdOfficeStatus).HasName("offices_status_pk");

            entity.ToTable("offices_status", "offices_management");

            entity.HasIndex(e => e.Name, "offices_status_unique").IsUnique();

            entity.Property(e => e.IdOfficeStatus)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_office_status");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Post>(entity =>
        {
            entity.HasKey(e => e.IdPost).HasName("posts_pkey");

            entity.ToTable("posts", "offices_management");

            entity.Property(e => e.IdPost).HasColumnName("id_post");
            entity.Property(e => e.Descriptions)
                .HasMaxLength(500)
                .HasColumnName("descriptions");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasColumnName("name");
        });

        modelBuilder.Entity<RentalAgreement>(entity =>
        {
            entity.HasKey(e => e.IdRentalAgreement).HasName("rental_agreements_pkey");

            entity.ToTable("rental_agreements", "offices_management");

            entity.Property(e => e.IdRentalAgreement).HasColumnName("id_rental_agreement");
            entity.Property(e => e.Document)
                .HasMaxLength(100)
                .HasColumnName("document");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.IdOffice).HasColumnName("id_office");
            entity.Property(e => e.IdUser).HasColumnName("id_user");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.StartDate).HasColumnName("start_date");

            entity.HasOne(d => d.IdOfficeNavigation).WithMany(p => p.RentalAgreements)
                .HasForeignKey(d => d.IdOffice)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("rental_agreements_id_office_fkey");

            entity.HasOne(d => d.IdUserNavigation).WithMany(p => p.RentalAgreements)
                .HasForeignKey(d => d.IdUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("rental_agreements_id_user_fkey");
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.IdReport).HasName("reports_pkey");

            entity.ToTable("reports", "offices_management");

            entity.Property(e => e.IdReport).HasColumnName("id_report");
            entity.Property(e => e.Content)
                .HasMaxLength(100)
                .HasColumnName("content");
            entity.Property(e => e.CreateDate).HasColumnName("create_date");
            entity.Property(e => e.IdReportsTypes).HasColumnName("id_reports_types");
            entity.Property(e => e.IdUser).HasColumnName("id_user");

            entity.HasOne(d => d.IdReportsTypesNavigation).WithMany(p => p.Reports)
                .HasForeignKey(d => d.IdReportsTypes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("reports_reports_types_fk");

            entity.HasOne(d => d.IdUserNavigation).WithMany(p => p.Reports)
                .HasForeignKey(d => d.IdUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("reports_id_user_fkey");
        });

        modelBuilder.Entity<ReportsType>(entity =>
        {
            entity.HasKey(e => e.IdReportsTypes).HasName("reports_types_pk");

            entity.ToTable("reports_types", "offices_management");

            entity.HasIndex(e => e.Name, "reports_types_unique").IsUnique();

            entity.Property(e => e.IdReportsTypes)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_reports_types");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Room>(entity =>
        {
            entity.HasKey(e => e.IdRoom).HasName("rooms_pkey");

            entity.ToTable("rooms", "offices_management");

            entity.Property(e => e.IdRoom).HasColumnName("id_room");
            entity.Property(e => e.IdFloor).HasColumnName("id_floor");
            entity.Property(e => e.IdRoomStatus).HasColumnName("id_room_status");
            entity.Property(e => e.Name)
                .HasMaxLength(45)
                .HasColumnName("name");
            entity.Property(e => e.Square).HasColumnName("square");
            entity.Property(e => e.TotalWorkspace).HasColumnName("total_workspace");

            entity.HasOne(d => d.IdFloorNavigation).WithMany(p => p.Rooms)
                .HasForeignKey(d => d.IdFloor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("rooms_id_floor_fkey");

            entity.HasOne(d => d.IdRoomStatusNavigation).WithMany(p => p.Rooms)
                .HasForeignKey(d => d.IdRoomStatus)
                .HasConstraintName("rooms_room_status_fk");
        });

        modelBuilder.Entity<RoomStatus>(entity =>
        {
            entity.HasKey(e => e.IdRoomStatus).HasName("room_status_pk");

            entity.ToTable("room_status", "offices_management");

            entity.HasIndex(e => e.Name, "room_status_unique").IsUnique();

            entity.Property(e => e.IdRoomStatus)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_room_status");
            entity.Property(e => e.Descriptions)
                .HasMaxLength(100)
                .HasColumnName("descriptions");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("name");
        });

        modelBuilder.Entity<StatusesWorker>(entity =>
        {
            entity.HasKey(e => e.IdStatusWorker).HasName("statuses_workers_pkey");

            entity.ToTable("statuses_workers", "offices_management");

            entity.Property(e => e.IdStatusWorker).HasColumnName("id_status_worker");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.IdDepartment).HasColumnName("id_department");
            entity.Property(e => e.IdPost).HasColumnName("id_post");
            entity.Property(e => e.IdStatus).HasColumnName("id_status");
            entity.Property(e => e.IdUser).HasColumnName("id_user");
            entity.Property(e => e.IdWorker).HasColumnName("id_worker");
            entity.Property(e => e.StartDate).HasColumnName("start_date");

            entity.HasOne(d => d.IdDepartmentNavigation).WithMany(p => p.StatusesWorkers)
                .HasForeignKey(d => d.IdDepartment)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("statuses_workers_departments_id_department_fkey");

            entity.HasOne(d => d.IdPostNavigation).WithMany(p => p.StatusesWorkers)
                .HasForeignKey(d => d.IdPost)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("statuses_workers_posts_id_post_fkey");

            entity.HasOne(d => d.IdStatusNavigation).WithMany(p => p.StatusesWorkers)
                .HasForeignKey(d => d.IdStatus)
                .HasConstraintName("statuses_workers_workers_statuses_types_fk");

            entity.HasOne(d => d.IdUserNavigation).WithMany(p => p.StatusesWorkers)
                .HasForeignKey(d => d.IdUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("statuses_workers_id_user_fkey");

            entity.HasOne(d => d.IdWorkerNavigation).WithMany(p => p.StatusesWorkers)
                .HasForeignKey(d => d.IdWorker)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("statuses_workers_id_worker_fkey");
        });

        modelBuilder.Entity<StatusesWorkspace>(entity =>
        {
            entity.HasKey(e => e.IdStatusWorkspace).HasName("statuses_workspaces_pkey");

            entity.ToTable("statuses_workspaces", "offices_management");

            entity.Property(e => e.IdStatusWorkspace).HasColumnName("id_status_workspace");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.IdUser).HasColumnName("id_user");
            entity.Property(e => e.IdWorker).HasColumnName("id_worker");
            entity.Property(e => e.IdWorkspace).HasColumnName("id_workspace");
            entity.Property(e => e.IdWorkspaceReservationsStatuses).HasColumnName("id_workspace_reservations_statuses");
            entity.Property(e => e.IdWorkspaceStatusType).HasColumnName("id_workspace_status_type");
            entity.Property(e => e.StartDate).HasColumnName("start_date");

            entity.HasOne(d => d.IdUserNavigation).WithMany(p => p.StatusesWorkspaces)
                .HasForeignKey(d => d.IdUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("statuses_workspaces_id_user_fkey");

            entity.HasOne(d => d.IdWorkerNavigation).WithMany(p => p.StatusesWorkspaces)
                .HasForeignKey(d => d.IdWorker)
                .HasConstraintName("statuses_workspaces_id_worker_fkey");

            entity.HasOne(d => d.IdWorkspaceNavigation).WithMany(p => p.StatusesWorkspaces)
                .HasForeignKey(d => d.IdWorkspace)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("statuses_workspaces_id_workspace_fkey");

            entity.HasOne(d => d.IdWorkspaceReservationsStatusesNavigation).WithMany(p => p.StatusesWorkspaces)
                .HasForeignKey(d => d.IdWorkspaceReservationsStatuses)
                .HasConstraintName("statuses_workspaces_workspace_reservations_statuses_fk");

            entity.HasOne(d => d.IdWorkspaceStatusTypeNavigation).WithMany(p => p.StatusesWorkspaces)
                .HasForeignKey(d => d.IdWorkspaceStatusType)
                .HasConstraintName("statuses_workspaces_id_statuses_fkey");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.IdUser).HasName("users_pkey");

            entity.ToTable("users", "offices_management");

            entity.HasIndex(e => e.Login, "users_login_key").IsUnique();

            entity.Property(e => e.IdUser).HasColumnName("id_user");
            entity.Property(e => e.IsAdmin)
                .HasDefaultValue(false)
                .HasColumnName("is_admin");
            entity.Property(e => e.Login)
                .HasMaxLength(20)
                .HasColumnName("login");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.Password).HasColumnName("password");
            entity.Property(e => e.Patronymic)
                .HasMaxLength(50)
                .HasColumnName("patronymic");
            entity.Property(e => e.RefreshToken)
                .HasColumnType("character varying")
                .HasColumnName("refresh_token");
            entity.Property(e => e.Surname)
                .HasMaxLength(50)
                .HasColumnName("surname");
        });

        modelBuilder.Entity<Worker>(entity =>
        {
            entity.HasKey(e => e.IdWorker).HasName("workers_pkey");

            entity.ToTable("workers", "offices_management");

            entity.Property(e => e.IdWorker).HasColumnName("id_worker");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.Patronymic)
                .HasMaxLength(50)
                .HasColumnName("patronymic");
            entity.Property(e => e.Surname)
                .HasMaxLength(50)
                .HasColumnName("surname");
        });

        modelBuilder.Entity<WorkerDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("worker_details", "offices_management");

            entity.Property(e => e.DepartmentName)
                .HasMaxLength(200)
                .HasColumnName("department_name");
            entity.Property(e => e.FullWorkerName).HasColumnName("full_worker_name");
            entity.Property(e => e.IdDepartment).HasColumnName("id_department");
            entity.Property(e => e.IdPost).HasColumnName("id_post");
            entity.Property(e => e.IdStatus).HasColumnName("id_status");
            entity.Property(e => e.IdWorker).HasColumnName("id_worker");
            entity.Property(e => e.PostName)
                .HasMaxLength(200)
                .HasColumnName("post_name");
            entity.Property(e => e.StatusName)
                .HasMaxLength(30)
                .HasColumnName("status_name");
        });

        modelBuilder.Entity<WorkersStatusesType>(entity =>
        {
            entity.HasKey(e => e.IdStatus).HasName("workers_statuses_types_pk");

            entity.ToTable("workers_statuses_types", "offices_management");

            entity.HasIndex(e => e.Name, "workers_statuses_types_unique").IsUnique();

            entity.Property(e => e.IdStatus)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_status");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Workspace>(entity =>
        {
            entity.HasKey(e => e.IdWorkspace).HasName("workspaces_pkey");

            entity.ToTable("workspaces", "offices_management");

            entity.Property(e => e.IdWorkspace).HasColumnName("id_workspace");
            entity.Property(e => e.IdRoom).HasColumnName("id_room");
            entity.Property(e => e.Name)
                .HasMaxLength(45)
                .HasColumnName("name");

            entity.HasOne(d => d.IdRoomNavigation).WithMany(p => p.Workspaces)
                .HasForeignKey(d => d.IdRoom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("workspaces_id_room_fkey");
        });

        modelBuilder.Entity<WorkspaceReservationsStatus>(entity =>
        {
            entity.HasKey(e => e.IdWorkspaceReservationsStatuses).HasName("workspaces_reservations__statuses_pk");

            entity.ToTable("workspace_reservations_statuses", "offices_management");

            entity.Property(e => e.IdWorkspaceReservationsStatuses)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_workspace_reservations_statuses");
            entity.Property(e => e.Descriptions)
                .HasMaxLength(300)
                .HasColumnName("descriptions");
            entity.Property(e => e.Name)
                .HasMaxLength(45)
                .HasColumnName("name");
        });

        modelBuilder.Entity<WorkspaceStatusesType>(entity =>
        {
            entity.HasKey(e => e.IdWorkspaceStatusType).HasName("statuses_pkey");

            entity.ToTable("workspace_statuses_types", "offices_management");

            entity.Property(e => e.IdWorkspaceStatusType)
                .HasDefaultValueSql("nextval('offices_management.statuses_id_statuses_seq'::regclass)")
                .HasColumnName("id_workspace_status_type");
            entity.Property(e => e.Descriptions)
                .HasMaxLength(300)
                .HasColumnName("descriptions");
            entity.Property(e => e.Name)
                .HasMaxLength(45)
                .HasColumnName("name");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
